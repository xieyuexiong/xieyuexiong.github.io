{"meta":{"title":"Zealot","subtitle":"嗨 我是谢月熊","description":"αȫջ","author":"Zealot","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"CSS之选择器","slug":"CSS之选择器","date":"2019-05-30T04:49:13.000Z","updated":"2019-05-30T06:14:14.519Z","comments":true,"path":"2019/05/30/CSS之选择器/","link":"","permalink":"http://yoursite.com/2019/05/30/CSS之选择器/","excerpt":"","text":"1.类选择器（class）&lt;标签 class=”NAME”&gt; 类选择器允许以一种独立于文档元素的方式来制定样式语法： . + NAME {} 还可以结合元素选择器来使用 例如：标签.NAME {} ； 2.ID选择器&lt;标签 id=”NAME”&gt; 与类选择器大概类似，有细微的差别。语法： #NAME{}与类选择器的差别：1、只能在文档中使用一次 2、不能使用id词列表（不能结合使用） 3、可以独立声明ID选择器 例如：#NAME{}； 3.属性选择器&lt;标签 title=”NAME”&gt; 作用：可以根据元素中的属性或属性值来选取指定元素语法：元素[title=”NAME”] []里面为属性名 选取含有指定属性的元素,[属性名=”属性值”] 选取指定元素例如： [abc^=”def”] 选择 abc 属性值以 “def” 开头的所有元素 [abc$=”def”] 选择 abc 属性值以 “def” 结尾的所有元素 [abc*=”def”] 选择 abc 属性值中包含子串 “def” 的所有元素 4.后代选择器与子元素选择器后代选择器语法：父标签 子标签{} 对父元素任意后代起作用子元素选择器语法 ：父标签&gt;子标签{} 对父元素某个确定的子元素起作用 5.兄弟选择器语法： 元素 + 元素 {} 此选择器应用于需要选择紧接在另一个元素后的元素，而且二者有相同的父元素 元素 ~ 元素 {} 此选择器应用于需要选择的元素后面所有的兄弟元素注意：用一个结合符只能选择两个相邻兄弟中的第二个元素","categories":[],"tags":[{"name":"HTML&&CSS基础","slug":"HTML-CSS基础","permalink":"http://yoursite.com/tags/HTML-CSS基础/"}]},{"title":"近期总结","slug":"近期总结","date":"2019-05-29T10:16:39.000Z","updated":"2019-05-29T11:16:13.350Z","comments":true,"path":"2019/05/29/近期总结/","link":"","permalink":"http://yoursite.com/2019/05/29/近期总结/","excerpt":"","text":"1、近期学习内容：HTML&amp;CSS基础，Java基础，TC图形库，hexo+github博客美化 2、学习参考https://www.sxt.cn/Java_jQuery_in_action/History_Direction.html（Java资料） https://www.bilibili.com/video/av49126649（HTML&amp;CSS基础） https://codeabc.cn/bestans/post/concise-lesson-contents（TC图形库的简单使用） https://www.jianshu.com/p/1f8107a8778c（博客美化教程） 3、总结最近应组导师的要求，主要学习的还是HTML&amp;CSS,java已经搁置了一段时间没学了，等把html&amp;css学完了再继续，TC图形库的应用主要是因为我的工程实践项目的需要才去学习的，去看博客美化完全是因为自己的博客界面实在太丑了。想把它美化一下而已。对之后每一个小结的学习我都会发表自己的总结（之前实在是没太多的时间）。 4、LeetCode题目：1.删除链表中的结点：https://paste.ubuntu.com/p/34nn55nDCB/ 总结：链表问题要着重考虑内存的问题 5、下周进度：继续进阶学习HTML&amp;CSS。","categories":[],"tags":[{"name":"周报","slug":"周报","permalink":"http://yoursite.com/tags/周报/"}]},{"title":"搭建博客","slug":"搭建博客","date":"2019-05-27T08:11:10.000Z","updated":"2019-05-27T08:32:50.991Z","comments":true,"path":"2019/05/27/搭建博客/","link":"","permalink":"http://yoursite.com/2019/05/27/搭建博客/","excerpt":"","text":"今天给大家介绍一下如何新建自己的博客，方案是基于node.js上的hexo模块加github的空间和域名。请大家先搭建一下，明天我们将一起搭建并介绍后期的用处。好处就是不用花钱买空间，还可以绑定自己域名。 使用Hexo+Github一步步搭建属于自己的博客（安装好后按照这个一步步来就可以搭建好啦）：https://www.cnblogs.com/fengxiongZz/p/7707219.html Hexo框架下用NexT(v6.0+)主题美化博客（初级初级）：https://blog.csdn.net/weixin_39345384/article/details/80785373 hexo搭建个人博客–NexT主题优化（美化进阶）：https://www.jianshu.com/p/1f8107a8778c bilibili视频地址：https://www.bilibili.com/video/av23913382?from=search&amp;seid=18138002325834960823 node-js 的安装教程https://www.runoob.com/nodejs/nodejs-install-setup.html git 安装教程https://www.runoob.com/git/git-tutorial.html","categories":[],"tags":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/tags/教程/"}]},{"title":"Frist Project","slug":"Frist-Project","date":"2019-05-26T14:15:52.000Z","updated":"2019-05-30T04:40:48.504Z","comments":true,"path":"2019/05/26/Frist-Project/","link":"","permalink":"http://yoursite.com/2019/05/26/Frist-Project/","excerpt":"","text":"第一次的工程实践项目：TC图形库下的贪吃蛇小程序（需要安装easyX）从http://www.easyx.cn/ 下载后安装 我的源代码如下： #include&lt;stdio.h&gt; #include &lt;graphics.h&gt; #include &lt;conio.h&gt; #include &lt;stdlib.h&gt; #include &lt;time.h&gt;/*初始化操作*///宏定义上下左右键值 #define up 72 #define down 80 #define left 75 #define right 77 //每一个结点代表一节蛇身，采用双向链表方便定位结点typedef struct Snake{ int x; int y; struct Snake next,prior; }snake; //flag代表食物是否被吃 1表示吃了 0表示没吃struct Food{ int x; int y; int flag;}food; //先定义开始的四节蛇snake head,tail,p,q;snake s,_new; int direct=right; //初始化方向向左int length=4;int i;int score=-10; //初始化分数int speed=0; //游戏速度 /***/ void Chooselevel(); //选择难度void Initsnake(); //初始化蛇void Drawsnake(); //画蛇void Movesnake(); //移动蛇的坐标void Controlsnake(); //键盘控制蛇的移动void Creatfood(); //随机出现食物void Drawfood(); //画食物void Eatingfood(); //蛇吃到食物void Endgame(); //游戏结束 int main(){ Chooselevel(); Initsnake(); while(1) { while(!kbhit()) { if(food.flag==0) { Creatfood(); score+=10; } cleardevice(); loadimage(NULL, _T(&quot;背景.jpg&quot;)); Movesnake(); Drawsnake(); Drawfood(); Eatingfood(); Sleep(speed); } Controlsnake(); } return 0; } void Initsnake(){ //初始化一个640*480的窗口 initgraph(640,480); //给初始的四节蛇分配空间 head = (snake *)malloc(sizeof(snake)); tail = (snake *)malloc(sizeof(snake)); p = (snake*)malloc(sizeof(snake)); q = (snake*)malloc(sizeof(snake)); //初始化坐标 head-&gt;x=60; head-&gt;y=30; p-&gt;x = 50; p-&gt;y = 30; q-&gt;x = 40; q-&gt;y = 30; tail-&gt;x=30; tail-&gt;y=30; //创建链表 head-&gt;next = p; p-&gt;next = q; q-&gt;next = tail; tail-&gt;next = NULL; tail-&gt;prior=q; q-&gt;prior=p; p-&gt;prior=head; head-&gt;prior=NULL; } void Drawsnake(){ //设置蛇的颜色 setlinecolor(RED); setfillcolor(YELLOW); //遍历蛇身进行绘图 s=head; for(i=0;i&lt;length;i++) { fillrectangle(s-&gt;x,s-&gt;y,s-&gt;x+10,s-&gt;y+10); s=s-&gt;next; } } void Movesnake(){ //将蛇的坐标向下一步进行覆盖 s=head; while(1) { if(s-&gt;next==NULL) break; else s=s-&gt;next; } for(i=0;i&lt;length-1;i++) { s-&gt;x=s-&gt;prior-&gt;x; s-&gt;y=s-&gt;prior-&gt;y; s=s-&gt;prior; } //移动蛇头 switch(direct) { case up: head-&gt;y -= 10; break; case down: head-&gt;y += 10; break; case left: head-&gt;x -= 10; break; case right: head-&gt;x += 10; break; } } void Controlsnake(){ int move; move=getch(); //获取键盘输入判断移动方向 switch(move) { case up: if(direct!=down) direct=up; break; case down: if(direct!=up) direct=down; break; case left: if(direct!=right) direct=left; break; case right: if(direct!=left) direct=right; break; } } void Creatfood(){ //随机生成食物坐标 srand((unsigned int)time(NULL)); food.x=rand()%6410; food.y=rand()%4810; //遍历蛇身 排除食物出现在蛇身 s=head; for(i=0;i&lt;length;i++) { if(s-&gt;x==food.x&amp;&amp;s-&gt;y==food.y) { food.flag=0; } else { food.flag = 1; } s=s-&gt;next; } } void Drawfood(){ //设置食物颜色 setlinecolor(LIGHTRED); setfillcolor(LIGHTRED); fillroundrect(food.x,food.y,food.x+10,food.y+10,15,15);} void Eatingfood(){ //判断食物和蛇头是否重合 if(head-&gt;x==food.x&amp;&amp;head-&gt;y==food.y) { s=head; while (1) { if(s-&gt;next==NULL) break; s=s-&gt;next; } _new=(snake*)malloc(sizeof(snake)); _new-&gt;next=s-&gt;next; s-&gt;next=_new; _new-&gt;prior=s; length++; food.flag=0; } //蛇如果吃到自己则退出 s=tail; for(i=3;i&lt;length;i++) { if(head-&gt;x == s-&gt;x&amp;&amp;head-&gt;y == s-&gt;y) { while(1) { Endgame(); } } s=s-&gt;next; } //蛇如果撞到墙则退出游戏 if(head-&gt;x==-10||head-&gt;x==640||head-&gt;y==-10||head-&gt;y==480) { while(1) { Endgame(); } } } void Endgame(){ //设置文字格式 char temp[20]; itoa(score,temp,10); settextcolor(RED); settextstyle(50,25,”楷体”); //结束界面 cleardevice(); outtextxy(210,80,&quot;游戏结束&quot;); outtextxy(150,210,&quot;你的分数是：&quot;); outtextxy(450,210,temp); Sleep(10000); } void Chooselevel(){ char str[20]; printf(&quot;请输入难度（easy,normal,hard）：&quot;); scanf(&quot;%s&quot;,str); if(strcmp(str,&quot;easy&quot;)==0) { speed=300; } else if(strcmp(str,&quot;normal&quot;)==0) { speed=100; } else if(strcmp(str,&quot;hard&quot;)==0) { speed=50; } else { printf(&quot;输入错误！&quot;); exit(0); } }","categories":[],"tags":[{"name":"C语言项目","slug":"C语言项目","permalink":"http://yoursite.com/tags/C语言项目/"}]},{"title":"第三次","slug":"第三次","date":"2018-12-29T07:22:38.000Z","updated":"2019-05-27T08:32:56.144Z","comments":true,"path":"2018/12/29/第三次/","link":"","permalink":"http://yoursite.com/2018/12/29/第三次/","excerpt":"","text":"本周学习方向：指针和数组，指针数组和数组指针. 学习参考：C语言教材。https://www.bilibili.com/video/av27744141/?p=22 总结：数组名其实是数组第一个元素的地址，当指针指向数组元素的时候，我们可以对指针变量进行加减运算，这样做的意义相当于指向距离指针所在位置向前或向后第n个元素. 指针数组是一个数组，每个数组元素存放一个指针变量。数组指针是一个指针，它指向的是一个数组. LeetCode题目1代码： 1. https://paste.ubuntu.com/p/XGMvGGz4dp/2. https://paste.ubuntu.com/p/4JPjxsPh4M/ 3. https://paste.ubuntu.com/p/6QjKNDcbw3/ 思考：第二题感觉难度较大，借鉴了网上的代码，大概看懂了。 5.下周进度继续深入学习指针，指针和二维数组的关系.","categories":[],"tags":[{"name":"周报","slug":"周报","permalink":"http://yoursite.com/tags/周报/"}]},{"title":"第二次","slug":"第二次","date":"2018-12-14T05:46:36.000Z","updated":"2019-05-27T08:32:58.295Z","comments":true,"path":"2018/12/14/第二次/","link":"","permalink":"http://yoursite.com/2018/12/14/第二次/","excerpt":"","text":"本周学习方向：共用体的使用。 学习参考：C语言教材。http://www.runoob.com/cprogramming/c-unions.htmlhttps://blog.csdn.net/yuandm819/article/details/51087877 总结：共用体是一种特殊的数据类型，允许在相同的内存位置存储不同的数据类型。可以定义一个带有多成员的共用体，但是任何时候只能有一个成员带有值。共用体提供了一种使用相同的内存位置的有效方式。共用体占用的内存应足够存储共用体中最大的成员。 LeetCode题目1代码： 1. https://paste.ubuntu.com/p/BN9jvyzP8C/2. https://paste.ubuntu.com/p/YNQxmTzZns/ 3. https://paste.ubuntu.com/p/jqZgMBMntR/ 思考：这三个还蛮简单的，没啥思考的了。5.下周进度继续深入学习共用体和结构体。","categories":[],"tags":[{"name":"周报","slug":"周报","permalink":"http://yoursite.com/tags/周报/"}]},{"title":"第一次","slug":"第一次","date":"2018-11-21T14:04:32.000Z","updated":"2019-05-27T08:33:00.024Z","comments":true,"path":"2018/11/21/第一次/","link":"","permalink":"http://yoursite.com/2018/11/21/第一次/","excerpt":"","text":"本周学习方向：二维数组，字符数组，限制字符串长度的函数。 学习参考：C语言教材。https://blog.csdn.net/mcgrady_tracy/article/details/7529892https://blog.csdn.net/huaijiu123/article/details/79897843 总结：二维数组就类似于线性代数中的矩阵，只要把行列分清楚就可以简单掌握。字符数组的初始化要注意末尾是以\\0结束的，一般使用gets函数初始化，设定的数组长度还要多一位给‘\\0’占用. 访问数组中的元素可以采用数组名加下标的方式，下标是从0开始，c并不检查数组下标是否越界，所以在访问数组中的元素时需要注意，需要对数组下标做判断，防止访问数组越界。 LeetCode题目1代码： https://paste.ubuntu.com/p/jKQFbdZYKs/思考：用个for循环发重复项找出重复项，并使下一个不相同的数赋值给第一个与上一项不同的那个数组位置去，以此类推就可以删除。 下周进度学习共用体有关内容。","categories":[],"tags":[{"name":"周报","slug":"周报","permalink":"http://yoursite.com/tags/周报/"}]},{"title":"你好，hexo","slug":"你好，hexo","date":"2018-10-15T15:56:08.000Z","updated":"2018-10-15T15:56:08.419Z","comments":true,"path":"2018/10/15/你好，hexo/","link":"","permalink":"http://yoursite.com/2018/10/15/你好，hexo/","excerpt":"","text":"","categories":[],"tags":[]}]}