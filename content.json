{"meta":{"title":"Zealot","subtitle":"Hello 冉佳小baby！","description":"αȫջ","author":"Zealot","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Frist Project","slug":"Frist-Project","date":"2019-05-26T14:15:52.000Z","updated":"2019-05-26T15:11:52.994Z","comments":true,"path":"2019/05/26/Frist-Project/","link":"","permalink":"http://yoursite.com/2019/05/26/Frist-Project/","excerpt":"","text":"第一次的工程实践项目：TC图形库下的贪吃蛇小程序（需要安装easyX）从http://www.easyx.cn/下载后安装 源代码如下： #include&lt;stdio.h&gt; #include &lt;graphics.h&gt; #include &lt;conio.h&gt; #include &lt;stdlib.h&gt; #include &lt;time.h&gt;/*初始化操作*///宏定义上下左右键值 #define up 72 #define down 80 #define left 75 #define right 77 //每一个结点代表一节蛇身，采用双向链表方便定位结点typedef struct Snake{ int x; int y; struct Snake next,prior; }snake; //flag代表食物是否被吃 1表示吃了 0表示没吃struct Food{ int x; int y; int flag;}food; //先定义开始的四节蛇snake head,tail,p,q;snake s,_new; int direct=right; //初始化方向向左int length=4;int i;int score=-10; //初始化分数int speed=0; //游戏速度 /***/ void Chooselevel(); //选择难度void Initsnake(); //初始化蛇void Drawsnake(); //画蛇void Movesnake(); //移动蛇的坐标void Controlsnake(); //键盘控制蛇的移动void Creatfood(); //随机出现食物void Drawfood(); //画食物void Eatingfood(); //蛇吃到食物void Endgame(); //游戏结束 int main(){ Chooselevel(); Initsnake(); while(1) { while(!kbhit()) { if(food.flag==0) { Creatfood(); score+=10; } cleardevice(); loadimage(NULL, _T(&quot;背景.jpg&quot;)); Movesnake(); Drawsnake(); Drawfood(); Eatingfood(); Sleep(speed); } Controlsnake(); } return 0; } void Initsnake(){ //初始化一个640*480的窗口 initgraph(640,480); //给初始的四节蛇分配空间 head = (snake *)malloc(sizeof(snake)); tail = (snake *)malloc(sizeof(snake)); p = (snake*)malloc(sizeof(snake)); q = (snake*)malloc(sizeof(snake)); //初始化坐标 head-&gt;x=60; head-&gt;y=30; p-&gt;x = 50; p-&gt;y = 30; q-&gt;x = 40; q-&gt;y = 30; tail-&gt;x=30; tail-&gt;y=30; //创建链表 head-&gt;next = p; p-&gt;next = q; q-&gt;next = tail; tail-&gt;next = NULL; tail-&gt;prior=q; q-&gt;prior=p; p-&gt;prior=head; head-&gt;prior=NULL; } void Drawsnake(){ //设置蛇的颜色 setlinecolor(RED); setfillcolor(YELLOW); //遍历蛇身进行绘图 s=head; for(i=0;i&lt;length;i++) { fillrectangle(s-&gt;x,s-&gt;y,s-&gt;x+10,s-&gt;y+10); s=s-&gt;next; } } void Movesnake(){ //将蛇的坐标向下一步进行覆盖 s=head; while(1) { if(s-&gt;next==NULL) break; else s=s-&gt;next; } for(i=0;i&lt;length-1;i++) { s-&gt;x=s-&gt;prior-&gt;x; s-&gt;y=s-&gt;prior-&gt;y; s=s-&gt;prior; } //移动蛇头 switch(direct) { case up: head-&gt;y -= 10; break; case down: head-&gt;y += 10; break; case left: head-&gt;x -= 10; break; case right: head-&gt;x += 10; break; } } void Controlsnake(){ int move; move=getch(); //获取键盘输入判断移动方向 switch(move) { case up: if(direct!=down) direct=up; break; case down: if(direct!=up) direct=down; break; case left: if(direct!=right) direct=left; break; case right: if(direct!=left) direct=right; break; } } void Creatfood(){ //随机生成食物坐标 srand((unsigned int)time(NULL)); food.x=rand()%6410; food.y=rand()%4810; //遍历蛇身 排除食物出现在蛇身 s=head; for(i=0;i&lt;length;i++) { if(s-&gt;x==food.x&amp;&amp;s-&gt;y==food.y) { food.flag=0; } else { food.flag = 1; } s=s-&gt;next; } } void Drawfood(){ //设置食物颜色 setlinecolor(LIGHTRED); setfillcolor(LIGHTRED); fillroundrect(food.x,food.y,food.x+10,food.y+10,15,15);} void Eatingfood(){ //判断食物和蛇头是否重合 if(head-&gt;x==food.x&amp;&amp;head-&gt;y==food.y) { s=head; while (1) { if(s-&gt;next==NULL) break; s=s-&gt;next; } _new=(snake*)malloc(sizeof(snake)); _new-&gt;next=s-&gt;next; s-&gt;next=_new; _new-&gt;prior=s; length++; food.flag=0; } //蛇如果吃到自己则退出 s=tail; for(i=3;i&lt;length;i++) { if((head-&gt;x == s-&gt;x&amp;&amp;head-&gt;y == s-&gt;y+10&amp;&amp;direct == down)||(head-&gt;x == s-&gt;x&amp;&amp;head-&gt;y == s-&gt;y-10&amp;&amp;direct == up) ||(head-&gt;x == s-&gt;x-10&amp;&amp;head-&gt;y == s-&gt;y&amp;&amp;direct == left)||(head-&gt;x == s-&gt;x+10&amp;&amp;head-&gt;y == s-&gt;y&amp;&amp;direct == right)) { while(1) { Endgame(); } } s-&gt;next; } //蛇如果撞到墙则退出游戏 if(head-&gt;x==-10||head-&gt;x==640||head-&gt;y==-10||head-&gt;y==480) { while(1) { Endgame(); } } } void Endgame(){ //设置文字格式 char temp[20]; itoa(score,temp,10); settextcolor(RED); settextstyle(50,25,”楷体”); //结束界面 cleardevice(); outtextxy(210,80,&quot;游戏结束&quot;); outtextxy(150,210,&quot;你的分数是：&quot;); outtextxy(450,210,temp); Sleep(10000); } void Chooselevel(){ char str[20]; printf(&quot;请输入难度（easy,normal,hard）：&quot;); scanf(&quot;%s&quot;,str); if(strcmp(str,&quot;easy&quot;)==0) { speed=300; } else if(strcmp(str,&quot;normal&quot;)==0) { speed=100; } else if(strcmp(str,&quot;hard&quot;)==0) { speed=50; } else { printf(&quot;输入错误！&quot;); exit(0); } }","categories":[],"tags":[]},{"title":"第三次","slug":"第三次","date":"2018-12-29T07:22:38.000Z","updated":"2018-12-29T07:26:23.842Z","comments":true,"path":"2018/12/29/第三次/","link":"","permalink":"http://yoursite.com/2018/12/29/第三次/","excerpt":"","text":"本周学习方向：指针和数组，指针数组和数组指针. 学习参考：C语言教材。https://www.bilibili.com/video/av27744141/?p=22 总结：数组名其实是数组第一个元素的地址，当指针指向数组元素的时候，我们可以对指针变量进行加减运算，这样做的意义相当于指向距离指针所在位置向前或向后第n个元素. 指针数组是一个数组，每个数组元素存放一个指针变量。数组指针是一个指针，它指向的是一个数组. LeetCode题目1代码： 1. https://paste.ubuntu.com/p/XGMvGGz4dp/2. https://paste.ubuntu.com/p/4JPjxsPh4M/ 3. https://paste.ubuntu.com/p/6QjKNDcbw3/ 思考：第二题感觉难度较大，借鉴了网上的代码，大概看懂了。 5.下周进度继续深入学习指针，指针和二维数组的关系.","categories":[],"tags":[]},{"title":"第二次","slug":"第二次","date":"2018-12-14T05:46:36.000Z","updated":"2018-12-14T05:49:20.820Z","comments":true,"path":"2018/12/14/第二次/","link":"","permalink":"http://yoursite.com/2018/12/14/第二次/","excerpt":"","text":"本周学习方向：共用体的使用。 学习参考：C语言教材。http://www.runoob.com/cprogramming/c-unions.htmlhttps://blog.csdn.net/yuandm819/article/details/51087877 总结：共用体是一种特殊的数据类型，允许在相同的内存位置存储不同的数据类型。可以定义一个带有多成员的共用体，但是任何时候只能有一个成员带有值。共用体提供了一种使用相同的内存位置的有效方式。共用体占用的内存应足够存储共用体中最大的成员。 LeetCode题目1代码： 1.https://paste.ubuntu.com/p/BN9jvyzP8C/2. https://paste.ubuntu.com/p/YNQxmTzZns/ 3. https://paste.ubuntu.com/p/jqZgMBMntR/ 思考：这三个还蛮简单的，没啥思考的了。5.下周进度继续深入学习共用体和结构体。","categories":[],"tags":[]},{"title":"第一次","slug":"第一次","date":"2018-11-21T14:04:32.000Z","updated":"2018-11-30T15:32:15.300Z","comments":true,"path":"2018/11/21/第一次/","link":"","permalink":"http://yoursite.com/2018/11/21/第一次/","excerpt":"","text":"本周学习方向：二维数组，字符数组，限制字符串长度的函数。 学习参考：C语言教材。https://blog.csdn.net/mcgrady_tracy/article/details/7529892https://blog.csdn.net/huaijiu123/article/details/79897843 总结：二维数组就类似于线性代数中的矩阵，只要把行列分清楚就可以简单掌握。字符数组的初始化要注意末尾是以\\0结束的，一般使用gets函数初始化，设定的数组长度还要多一位给‘\\0’占用. 访问数组中的元素可以采用数组名加下标的方式，下标是从0开始，c并不检查数组下标是否越界，所以在访问数组中的元素时需要注意，需要对数组下标做判断，防止访问数组越界。 LeetCode题目1代码： https://paste.ubuntu.com/p/jKQFbdZYKs/思考：用个for循环发重复项找出重复项，并使下一个不相同的数赋值给第一个与上一项不同的那个数组位置去，以此类推就可以删除。 下周进度学习共用体有关内容。","categories":[],"tags":[]},{"title":"你好，hexo","slug":"你好，hexo","date":"2018-10-15T15:56:08.000Z","updated":"2018-10-15T15:56:08.419Z","comments":true,"path":"2018/10/15/你好，hexo/","link":"","permalink":"http://yoursite.com/2018/10/15/你好，hexo/","excerpt":"","text":"","categories":[],"tags":[]}]}